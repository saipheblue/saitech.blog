<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fix on Saitech</title><link>https://saitech.blog/tags/fix/</link><description>Recent content in Fix on Saitech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://saitech.blog/tags/fix/index.xml" rel="self" type="application/rss+xml"/><item><title>Fix Arch Linux Boot After Graphics Driver Update</title><link>https://saitech.blog/p/fix-arch-linux-boot-after-graphics-driver-update/</link><pubDate>Sat, 14 Jun 2025 00:00:00 +0000</pubDate><guid>https://saitech.blog/p/fix-arch-linux-boot-after-graphics-driver-update/</guid><description>&lt;img src="https://saitech.blog/p/fix-arch-linux-boot-after-graphics-driver-update/1.png" alt="Featured image of post Fix Arch Linux Boot After Graphics Driver Update" />&lt;p>After updating my graphics drivers and running a full system update with
&lt;code>Sudo Pacman -Syu&lt;/code>, I discovered that Arch Linux would no longer boot properly. Instead, it stopped at a black screen showing the system disk path with a blinking dash underneath.&lt;/p>
&lt;p>I use &lt;code>SDDM&lt;/code> as my login manager and &lt;code>BSPWM&lt;/code> as my tiling window manager. Naturally, I suspected that the problem was with SDDM since itâ€™s responsible for the login screen and should be the first thing visible.&lt;/p>
&lt;h2 id="the-solution">The Solution
&lt;/h2>&lt;p>Luckily, I could still switch to a TTY by pressing CTRL + ALT + F3. From there, I checked the status of SDDM with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">systemctl status sddm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It showed an error: &amp;ldquo;Could not start Display server on vt 2&amp;rdquo; along with other related messages.&lt;/p>
&lt;p>After some searching, I found a helpful solution on Reddit in this &lt;a class="link" href="https://www.reddit.com/r/archlinux/comments/jtb1zb/sddm_failed_to_read_display_number_from_pipe/" target="_blank" rel="noopener"
>thread&lt;/a> by user omgrolak.&lt;/p>
&lt;p>The fix is to edit the initramfs configuration and add the necessary GPU modules. In the TTY, run:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo nano /etc/mkinitcpio.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then add these modules to the MODULES line:&lt;/p>
&lt;ul>
&lt;li>For Nvidia: &lt;code>nvidia nvidia_modeset nvidia_uvm nvidia_drm&lt;/code>&lt;/li>
&lt;li>For AMD: &lt;code>amdgpu&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Save and close the file. Then regenerate the initramfs with:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo mkinitcpio -P
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After this, a reboot fixed the problem, and Arch Linux booted normally again with the login screen showing up properly.&lt;/p>
&lt;h2 id="what-is-intramfs">What is intramfs?
&lt;/h2>&lt;p>The initramfs is a temporary, in-memory filesystem that is used by the Linux kernel during startup. Its primary job is to mount the real root filesystem. For this to happen, it needs to have all the necessary modules (drivers) to access the storage hardware and, crucially, to initialize the display.&lt;/p>
&lt;h2 id="fix-breakdown">Fix Breakdown
&lt;/h2>&lt;ul>
&lt;li>&lt;code>Editing /etc/mkinitcpio.conf&lt;/code>: This configuration file controls which modules are built into the initramfs.&lt;/li>
&lt;li>&lt;code>nvidia&lt;/code>: The main driver module.&lt;/li>
&lt;li>&lt;code>nvidia_modeset&lt;/code>: Enables Kernel Mode Setting (KMS), which allows the kernel to control the display resolution and mode directly. This is essential for a smooth graphical boot.&lt;/li>
&lt;li>&lt;code>nvidia_drm&lt;/code>: Provides the Direct Rendering Manager (DRM) interface, which is a modern standard for managing graphics output.&lt;/li>
&lt;li>&lt;code>nvidia_uvm&lt;/code>: The Unified Video Memory module, needed for certain modern NVIDIA features like CUDA.&lt;/li>
&lt;li>&lt;code>sudo mkinitcpio -P&lt;/code>: This command regenerates the initramfs for all kernel presets on your system, applying the changes you made to the configuration file.&lt;/li>
&lt;/ul></description></item></channel></rss>