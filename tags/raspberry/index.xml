<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Raspberry on Saitech</title><link>https://saitech.blog/tags/raspberry/</link><description>Recent content in Raspberry on Saitech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 12 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://saitech.blog/tags/raspberry/index.xml" rel="self" type="application/rss+xml"/><item><title>Fix Choppy or Unsupported Videos on Raspberry Pi Using FFmpeg</title><link>https://saitech.blog/p/fix-choppy-or-unsupported-videos-on-raspberry-pi-using-ffmpeg/</link><pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate><guid>https://saitech.blog/p/fix-choppy-or-unsupported-videos-on-raspberry-pi-using-ffmpeg/</guid><description>&lt;img src="https://saitech.blog/p/fix-choppy-or-unsupported-videos-on-raspberry-pi-using-ffmpeg/3.png" alt="Featured image of post Fix Choppy or Unsupported Videos on Raspberry Pi Using FFmpeg" /&gt;&lt;p&gt;When I was troubleshooting playback issues on my Raspberry Pi, I realized that many video formats, especially older ones like &lt;code&gt;.avi&lt;/code&gt;, aren&amp;rsquo;t fully supported by default media players. Some files wouldn’t play at all, others had no sound or were stuttering badly.&lt;/p&gt;
&lt;p&gt;After a bit of trial and error, the most reliable solution was to convert the videos to a more modern and compatible format — &lt;code&gt;MP4 with H.264&lt;/code&gt; for video and &lt;code&gt;AAC&lt;/code&gt; for audio.&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage
&lt;/h2&gt;&lt;p&gt;FFmpeg made the process simple. Here’s the command I used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ffmpeg -i input.avi -c:v libx264 -preset slow -crf 23 -c:a aac -b:a 128k output.mp4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="breakdown-of-the-command"&gt;Breakdown of the Command
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ffmpeg: The command-line tool used for processing audio and video&lt;/li&gt;
&lt;li&gt;-i input.avi: Specifies the input file. FFmpeg supports a wide range of formats including .avi, .mkv, .mov, .flv, .mpg, .ts, .webm, .wmv, and more&lt;/li&gt;
&lt;li&gt;-c:v libx264: Uses the H.264 video codec (via the libx264 library)&lt;/li&gt;
&lt;li&gt;-preset slow: A slower encoding preset which produces better compression (smaller file, same quality)&lt;/li&gt;
&lt;li&gt;-crf 23: Constant Rate Factor for quality control — 23 is a good balance between size and quality&lt;/li&gt;
&lt;li&gt;-c:a aac: Uses the AAC audio codec&lt;/li&gt;
&lt;li&gt;-b:a 128k: Sets audio bitrate to 128kbps&lt;/li&gt;
&lt;li&gt;output.mp4: The output file name&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-convert-to-mp4"&gt;Why Convert to MP4?
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Compatibility: MP4 with H.264/AAC is supported by nearly all devices and browsers.&lt;/li&gt;
&lt;li&gt;Efficiency: Better compression than older AVI formats.&lt;/li&gt;
&lt;li&gt;Smaller file size with the same perceptual quality.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gui-options-for-ffmpeg"&gt;GUI Options for FFmpeg
&lt;/h2&gt;&lt;p&gt;There are many graphical user interfaces (GUIs) available for FFmpeg, but personally, I chose the lightweight QWinFF, so I&amp;rsquo;ll just mention it here briefly.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://saitech.blog/p/fix-choppy-or-unsupported-videos-on-raspberry-pi-using-ffmpeg/2.png"
width="1051"
height="469"
srcset="https://saitech.blog/p/fix-choppy-or-unsupported-videos-on-raspberry-pi-using-ffmpeg/2_hu_7d4500780db3d01e.png 480w, https://saitech.blog/p/fix-choppy-or-unsupported-videos-on-raspberry-pi-using-ffmpeg/2_hu_fcdedc1555da9274.png 1024w"
loading="lazy"
alt="QWINFF"
class="gallery-image"
data-flex-grow="224"
data-flex-basis="537px"
&gt;&lt;/p&gt;
&lt;p&gt;Installation on Arch Linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;yay -S qwinff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item><item><title>DIY Geiger counter</title><link>https://saitech.blog/p/diy-geiger-counter/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://saitech.blog/p/diy-geiger-counter/</guid><description>&lt;img src="https://saitech.blog/p/diy-geiger-counter/5.jpg" alt="Featured image of post DIY Geiger counter" /&gt;&lt;p&gt;&lt;img src="https://saitech.blog/p/diy-geiger-counter/2.png"
width="1911"
height="1086"
srcset="https://saitech.blog/p/diy-geiger-counter/2_hu_4d9e1a1de9e7182b.png 480w, https://saitech.blog/p/diy-geiger-counter/2_hu_aefccaa9262dca4a.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="175"
data-flex-basis="422px"
&gt;&lt;img src="https://saitech.blog/p/diy-geiger-counter/1.jpg"
width="4000"
height="3000"
srcset="https://saitech.blog/p/diy-geiger-counter/1_hu_3c799a12db51e7d.jpg 480w, https://saitech.blog/p/diy-geiger-counter/1_hu_1e534e07ca3e16e0.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="320px"
&gt;&lt;/p&gt;
&lt;h2 id="what-will-you-need"&gt;What will you need
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Geiger–Müller kit &lt;a class="link" href="https://www.ebay.com/itm/396034408437?_skw=Geiger_Counter_RadiationD-v1.1-CAJOE" target="_blank" rel="noopener"
&gt;for example this one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raspberry pi - any model is fine but guide is written for raspberry pi 5. For older models you will need to make some adjustments&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="hardware"&gt;Hardware
&lt;/h2&gt;&lt;p&gt;Connect 5V to any 5V, Ground to any ground and VIN to GPIO4 (pin 7)&lt;/p&gt;
&lt;h3 id="rpi5-gpio-diagram"&gt;Rpi5 GPIO diagram
&lt;/h3&gt;&lt;p&gt;&lt;img src="https://saitech.blog/p/diy-geiger-counter/4.png"
width="2165"
height="1247"
srcset="https://saitech.blog/p/diy-geiger-counter/4_hu_b06ff95892119d4b.png 480w, https://saitech.blog/p/diy-geiger-counter/4_hu_2baefa7a8ea68b0e.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="173"
data-flex-basis="416px"
&gt;&lt;/p&gt;
&lt;h3 id="μsvh-ratio"&gt;μSv/h Ratio
&lt;/h3&gt;&lt;p&gt;Check the tube that is installed in your kit. In my case, I have J305. We need to calculate μSv/h ratio based on the tube&amp;rsquo;s sensitivity.
For J305, almost everyone is using the wrong coefficient/ratio of 0.00812037037037. Here is the formula I used, together with a source elaborating why 0.0081 is wrong: J305 has 25 CPM&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1 / (25 * 60 / 8.77) = 0.00584666666667&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://medium.com/@iotdevices/geiger-tube-j305-how-to-calculate-the-conversion-factor-of-cpm-to-%CE%BCsv-h-technical-note-b0cc14850576" target="_blank" rel="noopener"
&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="software"&gt;Software
&lt;/h2&gt;&lt;p&gt;I am using Raspbian OS. If you have a different OS, commands may differ.&lt;/p&gt;
&lt;h3 id="required-files"&gt;Required files
&lt;/h3&gt;&lt;p&gt;Navigate to &lt;b&gt;&lt;a class="link" href="https://github.com/saipheblue/Rpi5_Geiger_Counter_RadiationD-v1.1-CAJOE?search=1" target="_blank" rel="noopener"
&gt;this&lt;/a&gt;&lt;/b&gt; repository and clone it.&lt;/p&gt;
&lt;p&gt;In documentation folder, you can find more detailed information about how everything works and values used in calculations&lt;/p&gt;
&lt;h2 id="issues--pre-req"&gt;Issues &amp;amp; pre-req
&lt;/h2&gt;&lt;h3 id="install-flask"&gt;Install flask
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;pip install flask
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you got permisisons error, use sudo&lt;/p&gt;
&lt;p&gt;If you get a 404 error, make sure index page is in the &amp;ldquo;templates&amp;rdquo; folder. It is case sensitive. The structure should be as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Project
geiger.py
templates
index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="m4011-tube"&gt;M4011 tube
&lt;/h3&gt;&lt;p&gt;The manufacturer’s documentation lists the M4011, which has the same specs as the J305.&lt;/p&gt;
&lt;h3 id="ssl"&gt;SSL
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;ssl_context=('cert.pem', 'key.pem')&lt;/code&gt; can be replaced by &lt;code&gt;ssl_context='adhoc'&lt;/code&gt; if you dont have the keys&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://zhangtemplar.github.io/flask/" target="_blank" rel="noopener"
&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="gpio-problem"&gt;GPIO problem
&lt;/h3&gt;&lt;p&gt;RPi 5 has issues with GPIO. Remove the current GPIO library using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;sudo apt remove python3-rpi.gpio
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then install lgpio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;python3 -m pip install rpi-lgpio flask
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you have installation problems, use this (but it could break system packages, or you can use a virtual environment):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;python3 -m pip install rpi-lgpio flask --break-system-packages
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class="link" href="https://pimylifeup.com/python-externally-managed-environment/" target="_blank" rel="noopener"
&gt;more info&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="run-the-script"&gt;Run the script
&lt;/h2&gt;&lt;p&gt;Simply run &lt;b&gt;geiger.py&lt;/b&gt; to start measuring:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;python3 geiger.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then navigate to &lt;b&gt;&lt;code&gt;127.0.0.1:80/index&lt;/code&gt;&lt;/b&gt; to see the chart&lt;/p&gt;</description></item></channel></rss>